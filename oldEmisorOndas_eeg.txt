""" import asyncio
import time
import json
import websockets
from brainflow.board_shim import BoardShim, BrainFlowInputParams, BoardIds

async def send_data():
    try:
        BoardShim.enable_dev_board_logger()
        params = BrainFlowInputParams()
        board = BoardShim(BoardIds.SYNTHETIC_BOARD.value, params)
        board.prepare_session()
        board.start_stream()
        
        async with websockets.connect('wss://dw28lw-8765.csb.app') as websocket:  
            while True:
                start_time = time.time()
                data = board.get_current_board_data(250)
                print("Datos enviados:", data)  # Imprime los datos enviados
                await websocket.send(json.dumps(data.tolist()))

                elapsed_time = time.time() - start_time
                await asyncio.sleep(max(0, 1/250 - elapsed_time))
        
        board.stop_stream()
        board.release_session()
    except websockets.ConnectionClosed as e:
        print(f"Conexión cerrada: {e}")
    except Exception as e:
        print(f"Error: {e}")

async def main():
    await send_data()

if __name__ == "__main__": 
   asyncio.run(main())
 """


""" import asyncio
import time
import json
import websockets

async def send_data():
    while True:
        try:
            async with websockets.connect('wss://f27dfk-8765.csb.app') as websocket: #https:
                while True:
                    # Generar datos (en este caso, una lista de valores)
                    data = [time.time(), time.time() + 1, time.time() + 2]
                    print("Enviando datos:", data)
                    
                    # Enviar los datos al receptor
                    await websocket.send(json.dumps(data))
                    
                    # Esperar 1 segundo antes de enviar el siguiente conjunto de datos
                    await asyncio.sleep(1)
        except websockets.ConnectionClosed as e:
            print(f"Conexión cerrada: {e}")
            # Esperar un momento antes de intentar reconectar
            await asyncio.sleep(1)
        except Exception as e:
            print(f"Error: {e}")
            # Esperar un momento antes de intentar nuevamente
            await asyncio.sleep(1)

async def main():
    await send_data()

if __name__ == "__main__":
    asyncio.run(main()) """


""" import asyncio
import time
import json
import websockets
from brainflow.board_shim import BoardShim, BrainFlowInputParams, BoardIds

async def send_data():
    try:
        BoardShim.enable_dev_board_logger()
        params = BrainFlowInputParams()
        board = BoardShim(BoardIds.SYNTHETIC_BOARD.value, params)
        board.prepare_session()
        board.start_stream()
        
        async with websockets.connect('wss://f27dfk-8765.csb.app') as websocket:
            while True:
                start_time = time.time()
                data = board.get_current_board_data(250)
                print("Datos enviados:", data.tolist())  # Imprime los datos enviados
                
                await websocket.send(json.dumps(data.tolist()))

                elapsed_time = time.time() - start_time
                await asyncio.sleep(max(0, 1/250 - elapsed_time))
        
        board.stop_stream()
        board.release_session()
    except websockets.ConnectionClosed as e:
        print(f"Conexión cerrada: {e}")
    except Exception as e:
        print(f"Error: {e}")

async def main():
    await send_data()

if __name__ == "__main__":
    asyncio.run(main())
 """